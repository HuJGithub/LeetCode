'''Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:
Given this linked list: 1->2->3->4->5
For k = 2, you should return: 2->1->4->3->5
For k = 3, you should return: 3->2->1->4->5
Note:
Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.'''

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        '''注意next的赋值问题，最好重新生成一个节点，只保留数值'''
        rl=[]
        rl1=[]
        i=0
        while head!=None:
            tmp=ListNode(head.val)        
            rl.append(tmp)
            head=head.next
            i+=1
            if i==k:
                rl.reverse()
                rl1.extend(rl)
                rl=[]
                i=0
        rl1.extend(rl)
        ln=head=ListNode(0)
        for _n in rl1:
            head.next=_n
            head=head.next
        return ln.next
