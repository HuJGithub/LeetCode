'''
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?

Above is a 7 x 3 grid. How many possible unique paths are there?
Note: m and n will be at most 100.
Example 1:
Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:
Input: m = 7, n = 3
Output: 28
'''

import math 

class Solution:
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        '''用数学的方法或者动态规划皆可，第一种方法是分析横着走有m-1步，竖着走有n-1步，所以不同的方法为(m+n-2)!//(m-1)!*(n-1)!
        第二种方法是动态规划，path[i][j]只能由左边和上面的path到达，所以方法次数为两者之和，而最左边和最上面的一排或列初值都为1，因为只有一种方法额             能到'''
        '''
        方法一
        a=math.factorial(m+n-2)
        b=math.factorial(m-1)
        c=math.factorial(n-1)
        return a//(b*c)'''
        '''aux = [[1 for x in range(n)] for x in range(m)]'''
        '''方法二'''
        path=[[1]*m for i in range(n)]
        for i in range(1,n):
            for j in range(1,m):
                path[i][j]=path[i-1][j]+path[i][j-1]
        return path[n-1][m-1]
