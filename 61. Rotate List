'''
Given a linked list, rotate the list to the right by k places, where k is non-negative.
Example 1:
Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:
Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL
'''

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
'''从前往后数length-k个节点，把列表连成一个循环列表，找到位置后把列表再打开即可'''
class Solution:
    def rotateRight(self, head, k):
        if head==None:
            return None
        p,j=head,1

        while p.next!=None:
            p=p.next
            j+=1
        k=j-k%j 
        
        p.next=head
        
        for i in range(k):
            p=p.next
            
        head=p.next
        p.next=None
        
        return head
