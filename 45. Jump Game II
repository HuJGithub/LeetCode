'''
Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.
Example:
Input: [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2.
    Jump 1 step from index 0 to 1, then 3 steps to the last index.
Note:
You can assume that you can always reach the last index.
'''

class Solution:
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        '''采用宽度优先搜索，如果i大于这一层达到的最大值，则step加1，下次到达的最大距离为maxrange'''
        lastrange=0
        maxrange=0
        step=0
        lenn=len(nums)
        if lenn<2:
            return 0
        
        for i in range(lenn):
            if i>lastrange:
                step+=1
                lastrange=maxrange
                
            maxrange=max(maxrange,nums[i]+i)
            
            if maxrange>=lenn-1:
                return step+1
        return 0
