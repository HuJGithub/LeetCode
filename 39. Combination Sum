'''
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.
The same repeated number may be chosen from candidates unlimited number of times.
Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:
Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
'''

class Solution:
    def solve(self,ca,t,tmp,rl,start):
        if t<0:
            return
        
        if t==0:         
            rl.append(tmp)
            return
        
        for i in range(start,len(ca)):
            self.solve(ca,t-ca[i],tmp+[ca[i]],rl,i)             
            
                    
        
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        tmp=[]
        rl=[]
        for i in candidates:
            if i==target:
                c=[]
                c.append(i)
                if c not in rl:
                    rl.append(c)
                candidates.remove(i)
            if i>target:
                candidates.remove(i)
        self.solve(candidates,target,tmp,rl,0)
        return rl
