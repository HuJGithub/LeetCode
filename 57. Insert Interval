'''
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
'''

# Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e
'''两种方法，第一种，将newinterval加入队列，排序，按上一题方法求解
    第二种方法如下，逐个比较'''
class Solution:
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[Interval]
        :type newInterval: Interval
        :rtype: List[Interval]
        """
        if intervals==[]:
            return [newInterval]
        rl=[]
        i=0
        while i<len(intervals) and intervals[i].end<newInterval.start:
            i+=1
        
        rl+=intervals[:i]
        while i<len(intervals) and intervals[i].start<=newInterval.end:
            newInterval=Interval(min(intervals[i].start,newInterval.start),max(intervals[i].end,newInterval.end))
            i+=1

        
        return rl+[newInterval]+intervals[i:]
