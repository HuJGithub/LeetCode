...
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
You are given a target value to search. If found in the array return true, otherwise return false.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:
This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?
...

class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """
        if nums==[]:
            return False
       
        l,r=0,len(nums)-1
        
        while l<=r:
            m=(l+r)//2
            if nums[m]==target:
                return True
            if nums[l]<nums[m]:
                if target<=nums[m] and target>=nums[l]:
                    r=m-1
                else:
                    l=m+1
            elif nums[l]>nums[m]:
                if target<=nums[r] and target>=nums[m]:
                    l=m+1
                else:
                    r=m-1
            else:
                l+=1
        return False
