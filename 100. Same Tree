...
Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
Example 1:
Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true
Example 2:
Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false
Example 3:
Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false
...
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        queue1=[]
        queue2=[]
        while p or q or queue1!=[] or queue2!=[]:
            if p and q and p.val!=q.val:
                return False
            if p and q==None:
                return False
            if p==None and q:
                return False
            if p and q:
                queue1.insert(0,p.left)
                queue1.insert(0,p.right)
                queue2.insert(0,q.left)
                queue2.insert(0,q.right)
            p=queue1.pop()
            q=queue2.pop()
            
        return True
