'''
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.
Each number in candidates may only be used once in the combination.
Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:
Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]
'''

class Solution:
    def solve(self,ca,t,tmp,rl,start):
        if t<0:
            return
        
        if t==0:            
            rl.append(tmp)
            return
        
        for i in range(start,len(ca)):
            if i > start and ca[i] == ca[i - 1]:
                continue
            if ca[i]>t:
                return
            self.solve(ca,t-ca[i],tmp+[ca[i]],rl,i+1)             
            
                    
        
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        tmp=[]
        rl=[]

                
        candidates.sort()
        
        
        self.solve(candidates,target,tmp,rl,0)
        
        return rl        
