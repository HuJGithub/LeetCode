...
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.
Example:
Input:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
Output: 6
...

class Solution:
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        ret=0

        if matrix==[]:
            return ret
        m,n=len(matrix),len(matrix[0])
        height=[0]*n
        for i in range(m):
            for j in range(n):
                if matrix[i][j]=='0':
                    height[j]=0
                else:
                    height[j]+=1
            ret=max(ret,self.maxRec(height))
        return ret
    
    def maxRec(self,height):
        stk=[]
        ret=0
        for c in height:
            if stk==[] or stk[-1]<=c:
                stk.append(c)
            else:
                count=0
                while (stk!=[] and stk[-1]>c):
                    count+=1
                    s=stk.pop()
                    ret=max(ret,s*count)
                while count>0:
                    stk.append(c)
                    count-=1
                stk.append(c)
        count=1
        for c in stk[::-1]:
            ret=max(ret,c*count)
            count+=1
        return ret
