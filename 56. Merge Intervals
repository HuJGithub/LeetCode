'''
Given a collection of intervals, merge all overlapping intervals.
Example 1:
Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:
Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considerred overlapping.
'''

# Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution:
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        '''先对列表按start排序，然后分析前一个的start，end和当前start和end的关系，最后要加上一个tmp'''
        if intervals==[]:
            return []
        rl=[]
        intervals.sort(key=lambda x:x.start)
        tmp=intervals[0]
        for item in intervals[1:]:
            if tmp.end < item.start:
                rl.append(tmp)
                tmp=item
            elif tmp.end<=item.end:
                tmp=Interval(tmp.start,item.end)
        rl.append(tmp)
        return rl
