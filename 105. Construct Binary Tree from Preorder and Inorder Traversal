...
Given preorder and inorder traversal of a tree, construct the binary tree.
Note:
You may assume that duplicates do not exist in the tree.
For example, given
preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:
    3
   / \
  9  20
    /  \
   15   7
...

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def recurBuild(self,preorder,prestart,preend,inorder,instart,inend):
        if prestart>preend or instart>inend:
            return None
        val=preorder[prestart]
        root=TreeNode(val)
        index=inorder.index(val)
        length=index-instart
        root.left=self.recurBuild(preorder,prestart+1,prestart+length,inorder,instart,index-1)
        root.right=self.recurBuild(preorder,prestart+length+1,preend,inorder,index+1,inend)
        return root
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        root=self.recurBuild(preorder,0,len(preorder)-1,inorder,0,len(inorder)-1)
        return root
