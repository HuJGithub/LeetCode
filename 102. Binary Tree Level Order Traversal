...
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
...

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        rl,tmp,queue=[],[],[]
        limit=1
        nextlimit=0
        num=0
        cur=root
        while cur or queue!=[]:
            if cur:
                tmp.append(cur.val)
                queue.append(cur.left)
                queue.append(cur.right)
                if cur.left:
                    nextlimit+=1
                if cur.right:
                    nextlimit+=1
            cur=queue.pop(0)
            if tmp!=[] and len(tmp)==limit:
                rl.append(tmp)
                tmp=[]
                limit=nextlimit
                nextlimit=0
        return rl
