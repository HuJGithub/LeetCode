'''Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
Example:
Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6'''

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
'''将所有列表元素放入一个列表中，然后进行排序，最后重新生成列表'''
from operator import attrgetter
class Solution:

    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if lists==[]:
            return []
        if len(lists)==1:
            return lists[0]
        sortedlist = []
        for head in lists:
            while head:
                sortedlist.append(head)
                head=head.next
        sortedlist=sorted(sortedlist,key=attrgetter('val'))
        
        tmp = head = ListNode(0)
        for node in sortedlist:
            tmp.next=node
            tmp=tmp.next
        return head.next
