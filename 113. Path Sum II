...
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
Note: A leaf is a node with no children.
Example:
Given the below binary tree and sum = 22,
      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:
[
   [5,4,11,2],
   [5,8,4,5]
]
...

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def __init__(self):
        self.rl = []
    def recurpathSum(self,psum,tmp,sum,cur):
        if cur.left==None and cur.right==None and psum==sum:
            self.rl.append(tmp)
            return
        if cur.left:
            self.recurpathSum(psum+cur.left.val,tmp+[cur.left.val],sum,cur.left)
        if cur.right:
            self.recurpathSum(psum+cur.right.val,tmp+[cur.right.val],sum,cur.right)
        return
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        if root==None:
            return []
        self.recurpathSum(root.val,[root.val],sum,root)
        return self.rl
