...
Given a string containing only digits, restore it by returning all possible valid IP address combinations.
Example:
Input: "25525511135"
Output: ["255.255.11.135", "255.255.111.35"]
...

class Solution:
    def dfs(self,s,i,rl,pos):
       
        if i==3 and int(s[pos+1:])<=255 and (s[pos+1]!='0' or len(s[pos+1:])==1):
            rl.append(s[1:])
            return
        if i==3:
            return
        if pos+2<len(s):
            self.dfs(s[:pos+1]+s[pos+1:pos+2]+'.'+s[pos+2:],i+1,rl,pos+2)
        if pos+3<len(s) and s[pos+1]!='0':
            self.dfs(s[:pos+1]+s[pos+1:pos+3]+'.'+s[pos+3:],i+1,rl,pos+3)
        if pos+4<len(s) and s[pos+1]!='0' and int(s[pos+1:pos+4])<=255:
            self.dfs(s[:pos+1]+s[pos+1:pos+4]+'.'+s[pos+4:],i+1,rl,pos+4)
        return
    def restoreIpAddresses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        s='.'+s
        rl=[]
        self.dfs(s,0,rl,0)
        return rl
