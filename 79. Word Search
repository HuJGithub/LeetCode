...
Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example:
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.
...

class Solution:
    def subexist(self,board,word,i,j,k,used):
        
        if k==len(word)-1:
            return True
        
        used[i][j]=1
        if i+1<len(board) and used[i+1][j]==0 and board[i+1][j]==word[k+1] and self.subexist(board,word,i+1,j,k+1,used):
            return True
            
        if i-1>=0 and used[i-1][j]==0 and board[i-1][j]==word[k+1] and self.subexist(board,word,i-1,j,k+1,used):
            return True
        
        if j+1<len(board[0]) and used[i][j+1]==0 and board[i][j+1]==word[k+1] and self.subexist(board,word,i,j+1,k+1,used):
            return True
        
        if j-1>=0 and used[i][j-1]==0 and board[i][j-1]==word[k+1] and self.subexist(board,word,i,j-1,k+1,used):
            return True
        
        used[i][j]=0
        return False
    
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        m=len(board)
        n=len(board[0])
        used=[[0]*n for _ in range(m)]
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]==word[0] and self.subexist(board,word,i,j,0,used):
                    return True
        return False
