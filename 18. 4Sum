'''Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note:
The solution set must not contain duplicate quadruplets.
Example:
Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]'''

class Solution:
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        nums = sorted(nums)
        if len(nums)<4 or target < nums[0]*4 or target > nums[-1]*4:
            return []
        L = []    
        targettemp = target
        for i in range(len(nums)):
            if i>0 and nums[i]==nums[i-1]:
                continue
            target = target - nums[i]
            for j in range(i+1,len(nums)):
                l = j+1
                r = len(nums)-1
                if j>i+1 and nums[j] == nums[j-1]:
                    continue
                while(l<r):
                    tmp = nums[j]+nums[l]+nums[r]

                    if tmp == target:
                        L.append((nums[i],nums[j],nums[l],nums[r]))
                    if tmp<target:
                        l +=1
                    else:
                        r -=1
            target = targettemp
        return list(set(L))
