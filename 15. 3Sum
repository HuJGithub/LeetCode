'''Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note:
The solution set must not contain duplicate triplets.
Example:
Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]'''

class Solution:
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        '''首先对列表排序，然后从第一个数开始，进行左右夹逼，如果三个数之和为0，则加入列表，否则小于0则左边下标加1，否则右边下标加1.最后进行去重运算'''
        reslist = []
        nums = sorted(nums)
        for i in range(len(nums)-2):
            if nums[i]>0:
                break
            l = i+1
            r = len(nums)-1
            if i>0 and nums[i]==nums[i-1]:
                continue
            while l<r:
                tmp = nums[i]+nums[l]+nums[r]
                if tmp==0 :
                    reslist.append((nums[i],nums[l],nums[r]))
                if tmp>0:
                    r -= 1
                else:
                    l += 1
                    
        return list(set(reslist))
